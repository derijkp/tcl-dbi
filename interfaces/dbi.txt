#interface dbi 0.1 {
	description {
		The dbi interface is used to connect to SQL databases, and can be used to execute
		queries, get results, etc. from a database.
	}
	subcommands {
		open {
			description {open the given 'database'. Extra arguments can be given, depending on the backend used}
			arguments {
				database {
					type string
					description {
						identifier of the database, what this is exactly, can depend on the implementation
					}
				}
				args {free to implementation}
			}
			returns nothing
		}
		exec {
			description {
				execute the 'sql' commands in the databases.
				arguments are used where the 'sql' contains ?.
				If an sql error occurs, all changes made in the current transaction will 
				be rolled back. If no explicit has been explicitly started by the user 
				using "dbName begin", this means all changes made in the current exec.
			}
			options {
				-usefetch {
					type boolean
					description {
						if set, do not return the resultset of a select query as a list. The fetch
						subcmd will be used to get the results instead.
					}
				}
				-nullvalue {
					description {
						normally nulvalues in a resultset will return empty strings in the result;
						return 'string' instead for nullvalues
					}
				}
			}
			arguments {
				sql {
					description {
						query to be invoked. This query can contain placeholders (?). If so,
						these questionmarks will be replaced by the arguments given.
					}
				}
				argument {
					number *
					description {}
				}
			}
			returns {
				when a select query has been processed, and the -usefetch option is not used, 
				the subcmd returns a list of lists: each element of this list contains the
				selected values of one record (in a list).
				Otherwise nothing is returned
			}
			example {
				db exec {select "value" from "test_table" where "id" = ?} 100
			}
		}
		fetch {
			description {
				fetch one line of data from the database. This will only work after the exec 
				subcmd has been invoked with the -usefetch option. The optional arguments
				can be used to fetch a specific line and/or field
			}
			options {
				-nullvalue {
					type opt_string
					description {
						normally nulvalues in a resultset will return empty strings in the result;
						return 'string' instead for nullvalues
					}
				}
			}
			arguments {
				option {
					type string
					number 0-1
					description {
						normaly the data in the result is returned from a fetch command. If one
						of these options is present, something else is returned
					}
					values {
						pos {return the current position in the result. The first line is position 0}
						fields {return the fields present in the resultset instead of the next record}
						clear {clear the current resultset, do not return anything}
						isnull {returns 1 if the result contains a NULL value at the given line and field}
						lines {returns the number of lines in the result}
					}
				}
				line {
					type integer
					number 0-1
					description {position of line in the result to fetch, use current for the current line}
				}
				field {
					type string
					number 0-1
					description {field to fetch}
				}
			}
			returns {
				a list of selected values in one record, unless one of the special options is used
			}
			example {
				db fetch
			}
		}
		tables {
			returns {a list with tables present in the current database}
		}
		fields {
			arguments {
				table {}
			}
			returns {a list with the fields present in the given table}
		}
		close {
			description {
				close the current database connection
			}
		}
		begin {
			description {
				start a transaction
			}
		}
		commit {
			description {
				commit the current transaction
			}
		}
		rollback {
			description {
				rollback the current transaction
			}
		}
		destroy {
			description {
				destroy the current dbi object
			}
		}
		serial {
			description {
				create or manage a serial field
			}
			subcommands {
				add {
					description {
						convert the given integer field in the given table 
						into a serial field (using generators, triggers, ...)
					}
					arguments {
						table {}
						field {}
						value {
							number *
							description {
								start value of the serial field
							}
						}
					}
				}
				delete {
					description {
						return the given serial field in the given table 
						into a normal integer field
					}
					arguments {
						table {}
						field {}
					}
				}
				set {
					description {
						if the argument value is present, the given serial field will be set to
						this value; if not, the current value is returned.
					}
					arguments {
						table {}
						field {}
						value {
							number ?
							description {
								value to set the serial to
							}
						}
					}
					returns {the current serial value}
				}
				next {
					description {
						increments the current value of the given serial field by 1, and returns
						the new value.
					}
					arguments {
						table {}
						field {}
					}
					returns {the current serial value}
				}
			}
		}
		info {
			description {
				return information about the database, database tables, etc. Which information
				is available can depend on the database and on the implementation of the interface.
				eg. some databases do not support roles, so you cannot get information about them
			}
			commands {
				user {
					returns {the current user for the database connection}
				}
				roles {
					description {
						return all roles accessible to the given user if the username argument
						is given. Otherwise return all roles in the database.
					}
					arguments {
						username {
							number *
						}
					}
					returns {a list of roles}
				}
				systemtables {
					description {
						the systemtables are not included in the list given by "object tables". You
						can get them by this command
					}
					returns {a list of all systemtables}
				}
				views {
					returns {a list of all views in the current database}
				}
				domains {
					returns {a list of all domains in the current database}
				}
				domain {
					arguments {
						domain {}
					}
					returns {the definition of the given domain}
				}
				access {
					description {
						used to find out information about the accessibility of tables, ...<br>
						if the table argument is not given, the command returns a list of
						all tables the given user/role has access to; if it is given, a list 
						of all fields in the given table the user has access to is returned.
					}
					arguments {
						accesstype {
							description {
								select, insert, delete, update or reference
							}
						}
						user {}
						table {number ?}
					}
				}
				table {
					description {
						information about the given table is returned in the form of a list
						containing pairs. The first element in each pair is a keyword and
						the second  element  of  each pair  is the value for that keyword (a map).
						Possible pairs are
						<table>
						<tr><td>keyword              </td><td>value</td></tr>
						<tr><td>fields               </td><td>list containing all fields in the table</td></tr>
						<tr><td>type,field           </td><td>type of field 'field'</td></tr>
						<tr><td>length,field         </td><td>size of field 'field'</td></tr>
						<tr><td>notnull,field        </td><td>1 if field 'field' has a not null constraint, otherwise not present</td></tr>
						<tr><td>primary,field        </td><td>present if field 'field' is a primary key, may contain the index</td></tr>
						<tr><td>unique,field         </td><td>present if field 'field' has a unique constraint, may contain the index</td></tr>
						<tr><td>foreign,field        </td><td>list with table and field the field 'field' references, only present if the field 'field' has a foreign key constraint</td></tr>
						<tr><td>constraint,constraint</td><td>'constraint' is a constraint defined for the table, may contain the index</td></tr>
						</table>
					}
					arguments {
						table {}
					}
					returns {
						a list of alternating keywords and associated values with information 
						about the table
					}
				}
			}
		}
	}
}
